"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_spotlightjs_overlay_dist_index-BfFEknL3_js"],{

/***/ "(app-pages-browser)/./node_modules/@spotlightjs/overlay/dist/index-BfFEknL3.js":
/*!******************************************************************!*\
  !*** ./node_modules/@spotlightjs/overlay/dist/index-BfFEknL3.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONSTANT_BOLD_FONT: () => (/* binding */ ct),\n/* harmony export */   CONSTANT_NORMAL_FONT: () => (/* binding */ V),\n/* harmony export */   DEFAULT_GRAPH_OPTIONS: () => (/* binding */ _),\n/* harmony export */   DEFAULT_PALETTE: () => (/* binding */ xt),\n/* harmony export */   Flamegraph: () => (/* binding */ Ot),\n/* harmony export */   GraphBase: () => (/* binding */ q),\n/* harmony export */   Sunburst: () => (/* binding */ At),\n/* harmony export */   Treemap: () => (/* binding */ zt),\n/* harmony export */   colorToCanvasFill: () => (/* binding */ $),\n/* harmony export */   createColorGetterFromMap: () => (/* binding */ ft),\n/* harmony export */   createColorGetterSpectrum: () => (/* binding */ pt),\n/* harmony export */   getTreeMaxDepth: () => (/* binding */ at),\n/* harmony export */   hueAngleToColor: () => (/* binding */ mt),\n/* harmony export */   normalizeTreeNode: () => (/* binding */ wt)\n/* harmony export */ });\nvar dt = Object.defineProperty;\nvar ut = (n, o, t) => o in n ? dt(n, o, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[o] = t;\nvar l = (n, o, t) => ut(n, typeof o != \"symbol\" ? o + \"\" : o, t);\nfunction mt(n, o = 1, t = 1) {\n  const e = (0.6 + 0.4 * Math.max(0, Math.cos(n))) * o, i = (0.5 + 0.2 * Math.max(0, Math.cos(n + Math.PI * 2 / 3))) * t;\n  return `hsl(${n * 180 / Math.PI}deg, ${Math.round(100 * e)}%, ${Math.round(100 * i)}%)`;\n}\nlet J, tt, et, W, S, y = 1, E;\nfunction $(n, o, t, e, i) {\n  if (!Array.isArray(n))\n    return n;\n  const s = window.devicePixelRatio || 1;\n  if (J !== o || tt !== s || et !== i) {\n    const h = Math.round(64 * s) / 64;\n    y = i, y = Math.log2(y), y -= Math.floor(y);\n    const a = y, r = Math.min(1, 8 * a);\n    y = 2 ** y;\n    const c = 8 * Math.SQRT2 / y;\n    J = o, tt = s, et = i, W || (W = document.createElement(\"canvas\")), S || (S = W.getContext(\"2d\")), W.width = W.height = Math.round(64 * h), S.scale(h, h), S.fillStyle = n[0], S.fillRect(0, 0, 64, 64), S.globalAlpha = 0.25, S.fillStyle = n[1], S.fillRect(0, 0, 64, 64), S.globalAlpha = 0.67, S.strokeStyle = n[1], S.beginPath();\n    for (let d = 0; d <= 64; d += 16)\n      S.moveTo(d - 32, d + 32), S.lineTo(d + 32, d - 32);\n    if (S.lineWidth = c * (1 - (r - a) / 2), S.stroke(), r + a > 0) {\n      S.beginPath();\n      for (let d = 8; d < 64; d += 16)\n        S.moveTo(d - 32, d + 32), S.lineTo(d + 32, d - 32);\n      S.lineWidth = c * (r + a) / 2, S.stroke();\n    }\n    E = o.createPattern(W, \"repeat\"), y /= h;\n  }\n  return t /= 64 * y * s, t -= Math.floor(t), t *= 64 * y * s, E.setTransform(new DOMMatrix([\n    y,\n    0,\n    0,\n    y,\n    t,\n    e\n  ])), E;\n}\nfunction ft(n) {\n  return (o) => o.id && n[o.id] || o.color;\n}\nfunction pt(n, o = 1, t = 1) {\n  const e = {};\n  return ot(e, n, 0, Math.PI * 2, o, t), ft(e);\n}\nfunction ot(n, o, t, e, i = 1, s = 1) {\n  const h = o.size;\n  n[o.id] = mt(t + e / 2, i, s);\n  for (const a of o.children) {\n    const r = a.size / h * e;\n    ot(n, a, t, r, i, s), t += r;\n  }\n}\nconst vt = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nfunction gt(n = 16, o = vt) {\n  let t = \"\", e = n;\n  const i = o.length;\n  for (; e--; )\n    t += o[Math.random() * i | 0];\n  return t;\n}\nfunction wt(n, o, t = (e, i) => i.size - e.size) {\n  if (n.__nanovis)\n    return n;\n  const e = {\n    ...n\n  };\n  return e.id || (e.id = gt()), e.parent || (e.parent = o), e.children || (e.children = []), e.sizeSelf == null && e.size != null && e.children.length === 0 ? e.sizeSelf = e.size : e.sizeSelf || (e.sizeSelf = 0), e.children = (e.children || []).map((i) => wt(i, e, t)), e.size || (e.size = e.children.reduce((i, s) => i + s.size, 0) + e.sizeSelf), t && e.children.sort(t), Object.defineProperty(e, \"__nanovis\", { enumerable: !1, value: !0 }), e;\n}\nfunction at(n) {\n  return n.children.length === 0 ? 1 : Math.max(...n.children.map((o) => at(o))) + 1;\n}\nconst Nt = /\\bFirefox\\//.test(navigator.userAgent);\nlet X;\nfunction rt(n) {\n  return X ? X.format(n) : `${n}`;\n}\nfunction D() {\n  return (window.performance || Date).now();\n}\nfunction H(n) {\n  const o = n.toFixed(1).split(\".\", 2);\n  return `${rt(+o[0])}.${o[1]}`;\n}\nfunction St(n) {\n  return n === 1 ? \"1 byte\" : n < 1024 ? `${rt(n)} bytes` : n < 1024 * 1024 ? `${H(n / 1024)} kb` : n < 1024 * 1024 * 1024 ? `${H(n / (1024 * 1024))} mb` : `${H(n / (1024 * 1024 * 1024))} gb`;\n}\nfunction lt(n, o, t, e, i, s) {\n  if (Nt) {\n    const h = n.lineWidth, a = h / 2;\n    n.fillStyle = o, n.fillRect(t - a, e - a, i + h, h), n.fillRect(t - a, e + a, h, s - h), n.fillRect(t - a, e + s - a, i + h, h), n.fillRect(t + i - a, e + a, h, s - h);\n    return;\n  }\n  n.strokeStyle = o, n.strokeRect(t, e, i, s);\n}\nfunction G(n) {\n  return window.addEventListener(\"wheel\", n, { passive: !1 }), () => window.removeEventListener(\"wheel\", n);\n}\nfunction j(n) {\n  return window.addEventListener(\"resize\", n), () => window.removeEventListener(\"resize\", n);\n}\ntry {\n  X = new Intl.NumberFormat();\n} catch {\n}\nlet Mt = () => ({\n  emit(n, ...o) {\n    for (let t = this.events[n] || [], e = 0, i = t.length; e < i; e++)\n      t[e](...o);\n  },\n  events: {},\n  on(n, o) {\n    var t;\n    return ((t = this.events)[n] || (t[n] = [])).push(o), () => {\n      var e;\n      this.events[n] = (e = this.events[n]) == null ? void 0 : e.filter((i) => o !== i);\n    };\n  }\n});\nconst _ = {\n  getText: (n) => n.text,\n  getSubtext: (n) => n.subtext,\n  animate: !0,\n  animateDuration: 350\n}, xt = {\n  fallback: \"#CCC\",\n  stroke: \"#0008\",\n  text: \"#222\",\n  hover: \"#fff5\",\n  shadow: \"#0008\",\n  fg: \"#fff\",\n  bg: \"#222\"\n}, yt = 46, V = \"14px sans-serif\", ct = `bold ${V}`;\nclass q {\n  constructor(o, t) {\n    l(this, \"el\");\n    l(this, \"canvas\");\n    l(this, \"c\");\n    l(this, \"width\", 0);\n    l(this, \"height\", 0);\n    l(this, \"ratio\", 1);\n    l(this, \"root\");\n    l(this, \"maxDepth\");\n    l(this, \"events\");\n    l(this, \"options\");\n    l(this, \"palette\");\n    l(this, \"disposables\");\n    l(this, \"getColor\");\n    l(this, \"getText\");\n    l(this, \"getSubtext\");\n    l(this, \"_animationFrame\", null);\n    l(this, \"_font\", \"14px sans-serif\");\n    l(this, \"_fontWidthCache\", /* @__PURE__ */ new Map());\n    l(this, \"ellipsisWidth\", 0);\n    this.options = {\n      ..._,\n      ...t\n    };\n    const {\n      getColor: e = pt(o),\n      getText: i = () => {\n      },\n      getSubtext: s = () => {\n      }\n    } = this.options;\n    this.palette = {\n      ...xt,\n      ...t.palette\n    }, this.el = document.createElement(\"div\"), this.canvas = document.createElement(\"canvas\"), this.c = this.canvas.getContext(\"2d\"), this.root = o, this.maxDepth = at(o), this.disposables = [], this.events = Mt(), this.getColor = e, this.getText = i, this.getSubtext = s, this.setFont(V), t.onClick && this.events.on(\"click\", t.onClick), t.onHover && this.events.on(\"hover\", t.onHover), t.onLeave && this.events.on(\"leave\", t.onLeave), t.onSelect && this.events.on(\"select\", t.onSelect), this.el.addEventListener(\"mouseleave\", () => {\n      this.events.emit(\"leave\");\n    });\n  }\n  /**\n   * Invalidate the graph and request a new frame.\n   */\n  invalidate() {\n    this._animationFrame === null && (this._animationFrame = requestAnimationFrame(() => {\n      this._animationFrame = null, this.tick();\n    }));\n  }\n  /**\n   * To be overridden by subclasses to implement custom animation logic.\n   */\n  tick() {\n    this.draw();\n  }\n  /**\n   * To be overridden by subclasses to implement custom animation logic.\n   */\n  draw() {\n  }\n  resize() {\n    this.ratio = window.devicePixelRatio || 1, this.canvas.style.width = `${this.width}px`, this.canvas.style.height = `${this.height}px`, this.canvas.width = Math.round(this.width * this.ratio), this.canvas.height = Math.round(this.height * this.ratio), this.c.scale(this.ratio, this.ratio), this.draw();\n  }\n  /**\n   * Select a node. To be overridden by subclasses to implement custom selection logic.\n   *\n   * @param node - The node to select.\n   * @param _animate - Whether to animate the selection.\n   */\n  select(o, t) {\n    this.events.emit(\"select\", o);\n  }\n  dispose() {\n    this.disposables.forEach((o) => o()), this.disposables.length = 0, this.el.remove();\n  }\n  [Symbol.dispose]() {\n    this.dispose();\n  }\n  getFontCache() {\n    return this._fontWidthCache.has(this._font) || this._fontWidthCache.set(this._font, {}), this._fontWidthCache.get(this._font);\n  }\n  setFont(o) {\n    this._font = o, this.c.font = o, this.c.textBaseline = \"middle\", this.ellipsisWidth = 3 * this.charCodeWidth(yt);\n  }\n  charCodeWidth(o) {\n    const t = this.getFontCache();\n    let e = t[o];\n    return e === void 0 && (e = this.c.measureText(String.fromCharCode(o)).width, t[o] = e), e;\n  }\n  textOverflowEllipsis(o, t) {\n    if (t < this.ellipsisWidth)\n      return [\"\", 0];\n    let e = 0;\n    const i = o.length;\n    let s = 0;\n    for (; s < i; ) {\n      const h = this.charCodeWidth(o.charCodeAt(s));\n      if (t < e + this.ellipsisWidth + h)\n        return [`${o.slice(0, s)}...`, e + this.ellipsisWidth];\n      e += h, s++;\n    }\n    return [o, e];\n  }\n}\nconst b = 24, Tt = 5, it = 0.01, st = 1e3;\nclass Ot extends q {\n  constructor(t, e = {}) {\n    super(t, e);\n    l(this, \"mainEl\", document.createElement(\"div\"));\n    l(this, \"totalBytes\");\n    l(this, \"viewportMin\");\n    l(this, \"viewportMax\");\n    l(this, \"zoomedOutMin\", 0);\n    l(this, \"zoomedOutWidth\", 0);\n    l(this, \"prevWheelTime\", 0);\n    l(this, \"prevWheelWasZoom\", !1);\n    l(this, \"stripeScaleAdjust\", 1);\n    l(this, \"hoveredNode\", null);\n    l(this, \"selectedNode\", null);\n    l(this, \"nodeStartBytes\", /* @__PURE__ */ new Map());\n    l(this, \"animationFromMin\", 0);\n    l(this, \"animationFromMax\", 0);\n    l(this, \"animationToMin\", 0);\n    l(this, \"animationToMax\", 0);\n    l(this, \"animationStart\", 0);\n    this.totalBytes = t.size, this.viewportMin = this.animationFromMin = this.animationToMin = 0, this.viewportMax = this.animationFromMax = this.animationToMax = this.totalBytes, Object.assign(this.mainEl.style, {\n      position: \"relative\"\n    }), Object.assign(this.canvas.style, {\n      position: \"absolute\",\n      left: \"0\",\n      top: \"0\"\n    });\n    let i = !1;\n    this.canvas.onmousedown = (s) => {\n      if (i = !1, s.button !== 2) {\n        let h = s.pageX;\n        const a = (c) => {\n          const d = c.pageX - h;\n          !i && Math.abs(d) < 3 || (i = !0, this.modifyViewport(-d, 0, null), h = c.pageX);\n        }, r = () => {\n          document.removeEventListener(\"mousemove\", a), document.removeEventListener(\"mouseup\", r);\n        };\n        s.preventDefault(), document.addEventListener(\"mousemove\", a), document.addEventListener(\"mouseup\", r);\n      }\n    }, this.canvas.onmousemove = (s) => {\n      this.updateHover(s);\n    }, this.canvas.onmouseout = () => {\n      this.changeHoveredNode(null);\n    }, this.canvas.onclick = (s) => {\n      if (i)\n        return;\n      const h = this.hitTestNode(s);\n      this.changeHoveredNode(h), this.changeSelectedNode(h), h && this.events.emit(\"click\", h, s);\n    }, this.disposables.push(G((s) => {\n      const h = s.deltaX, a = s.deltaY, r = D(), c = r - this.prevWheelTime < 50 ? this.prevWheelWasZoom : s.ctrlKey || s.metaKey;\n      this.prevWheelTime = r, this.prevWheelWasZoom = c, (c || Math.abs(h) >= Math.abs(a)) && s.preventDefault(), this.modifyViewport(h, a, c ? s.pageX : null), this.updateHover(s);\n    })), this.resize(), Promise.resolve().then(() => this.resize()), this.disposables.push(j(() => this.resize())), this.mainEl.append(this.canvas), this.el.append(this.mainEl);\n  }\n  tick() {\n    let t = (D() - this.animationStart) / (this.options.animateDuration ?? _.animateDuration);\n    t < 0 || t > 1 ? (t = 1, this.viewportMin = this.animationToMin, this.viewportMax = this.animationToMax) : (t < 0.5 ? t *= 4 * t * t : (t = 1 - t, t *= 4 * t * t, t = 1 - t), this.viewportMin = this.animationFromMin + (this.animationToMin - this.animationFromMin) * t, this.viewportMax = this.animationFromMax + (this.animationToMax - this.animationFromMax) * t, this.invalidate()), this.draw();\n  }\n  draw() {\n    this.c.clearRect(0, 0, this.width, this.height), this.drawNode(\n      this.root,\n      0,\n      0,\n      -1 / 0,\n      1\n      /* ROOT */\n    );\n  }\n  changeSelectedNode(t, e = this.options.animate ?? _.animate) {\n    if (this.selectedNode !== t && (this.selectedNode = t, this.events.emit(\"select\", t), t && this.nodeStartBytes.has(t.id))) {\n      let i = this.nodeStartBytes.get(t.id), s = i + t.size;\n      i = Math.max(0, i - t.size * it), s = Math.min(this.totalBytes, s + t.size * it), this.setViewport(i, s, e);\n    }\n  }\n  select(t, e = this.options.animate ?? _.animate) {\n    this.changeSelectedNode(t, e);\n  }\n  resize() {\n    this.width = this.el.clientWidth, this.height = this.maxDepth * b + 1, this.zoomedOutMin = this.width - st >> 1, this.zoomedOutWidth = this.zoomedOutMin + st, this.zoomedOutMin < 0 && (this.zoomedOutMin = 0), this.zoomedOutWidth > this.width && (this.zoomedOutWidth = this.width), this.zoomedOutWidth -= this.zoomedOutMin, this.stripeScaleAdjust = this.totalBytes / this.zoomedOutWidth, this.mainEl.style.height = `${this.height}px`, super.resize();\n  }\n  // We want to avoid overlapping strokes from lots of really small adjacent\n  // rectangles all merging together into a solid color. So we enforce a\n  // minimum rectangle width of 2px and we also skip drawing rectangles that\n  // have a right edge less than 1.5px from the previous right edge.\n  drawNode(t, e, i, s, h) {\n    this.nodeStartBytes.set(t.id, i);\n    const a = this.zoomedOutWidth / (this.viewportMax - this.viewportMin), r = this.zoomedOutMin + (i - this.viewportMin) * a, c = t.size * a, d = r + c;\n    if (d < s + 1.5)\n      return s;\n    if (r + c < 0 || r > this.width)\n      return d;\n    const m = c < 2 ? 2 : c, u = (r > 0 ? r : 0) + Tt, p = e + b / 2;\n    let v = this.getText(t) || \"\", g = this.getSubtext(t) || \"\", w, f = 0;\n    const N = c + r - u, M = $(this.getColor(t) || this.palette.fallback, this.c, this.zoomedOutMin - this.viewportMin * a, b, a * this.stripeScaleAdjust);\n    let T = this.palette.text, x = -1 / 0;\n    h & 1 ? (T = this.palette.fg, this.setFont(ct)) : (this.c.fillStyle = M, this.c.fillRect(r, e, m, b), (h & 2 || this.hoveredNode && t.id === this.hoveredNode.id) && (this.c.fillStyle = this.palette.hover, this.c.fillRect(r, e, m, b), h |= 2)), this.ellipsisWidth < N && (w = this.c.measureText(v).width, w <= N ? f += w : (v = this.textOverflowEllipsis(v, N)[0], f = N), this.c.fillStyle = T, this.c.fillText(v, u, p)), h & 1 && this.setFont(V), f + this.ellipsisWidth < N && (g && v && (g = ` - ${g}`), w = this.c.measureText(g).width, f + w > N && (g = this.textOverflowEllipsis(g, N - f)[0]), this.c.globalAlpha = 0.5, this.c.fillText(g, u + f, p), this.c.globalAlpha = 1);\n    for (const O of t.children)\n      x = this.drawNode(\n        O,\n        e + b,\n        i,\n        x,\n        h & -2\n        /* ROOT */\n      ), i += O.size;\n    return h & 1 || lt(this.c, this.palette.stroke, r + 0.5, e + 0.5, m, b), d;\n  }\n  changeHoveredNode(t) {\n    this.hoveredNode !== t && (this.hoveredNode = t, this.canvas.style.cursor = t && !t.children.length ? \"pointer\" : \"auto\", this.invalidate());\n  }\n  hitTestNode(t) {\n    const e = this.canvas.getBoundingClientRect(), i = t.clientX - e.left, s = t.clientY - e.top, h = this.viewportMin + (this.viewportMax - this.viewportMin) / this.zoomedOutWidth * (i - this.zoomedOutMin), a = (r, c, d) => {\n      if (h >= d && h < d + r.size) {\n        if (s >= c && s < c + b && r.id)\n          return r;\n        if (s >= c + b)\n          for (const m of r.children) {\n            const u = a(m, c + b, d);\n            if (u)\n              return u;\n            d += m.size;\n          }\n      }\n      return null;\n    };\n    return a(this.root, 0, 0);\n  }\n  modifyViewport(t, e, i) {\n    let s = this.viewportMin, h = this.viewportMax, a = 0;\n    if (i !== null) {\n      const r = s + (h - s) / this.zoomedOutWidth * (i - this.zoomedOutMin), c = 1.01 ** e;\n      s = r + (s - r) * c, h = r + (h - r) * c;\n    } else\n      a = t * (h - s) / this.zoomedOutWidth;\n    s + a < 0 ? a = -s : h + a > this.totalBytes && (a = this.totalBytes - h), s += a, h += a, s < 0 && (s = 0), h > this.totalBytes && (h = this.totalBytes), this.setViewport(s, h, !1);\n  }\n  setViewport(t, e, i) {\n    this.animationFromMin = this.viewportMin, this.animationFromMax = this.viewportMax, this.animationToMin = t, this.animationToMax = e, i ? this.animationStart = D() : this.animationStart = 0, this.invalidate();\n  }\n  updateHover(t) {\n    const e = this.hitTestNode(t);\n    this.changeHoveredNode(e), this.events.emit(\"hover\", e, t);\n  }\n}\nfunction ht(n, o) {\n  for (; o; ) {\n    if (o === n)\n      return !0;\n    o = o.parent;\n  }\n  return !1;\n}\nfunction I(n, o, t) {\n  if (n === o)\n    return;\n  const e = o.parent, i = e.size || 1;\n  let s = 0;\n  I(n, e, t);\n  for (const h of e.children) {\n    if (h === o) {\n      t.startAngle_ += t.sweepAngle_ * s / i, t.sweepAngle_ = h.size / i * t.sweepAngle_;\n      break;\n    }\n    s += h.size;\n  }\n  t.depth_ += 1;\n}\nconst L = {};\nfunction nt(n) {\n  return L[n] || (L[n] = 50 * 8 * Math.log(1 + Math.log(1 + n / 8))), L[n];\n}\nconst R = -Math.PI / 2;\nclass At extends q {\n  constructor(t, e = {}) {\n    for (; t.children.length === 1; )\n      t = t.children[0];\n    super(t, e);\n    l(this, \"currentNode\");\n    l(this, \"hoveredNode\");\n    l(this, \"centerX\", 0);\n    l(this, \"centerY\", 0);\n    l(this, \"animationStart\", 0);\n    l(this, \"radiusScale\", 1);\n    l(this, \"sourceDepth\", 0);\n    l(this, \"sourceStartAngle\", R);\n    l(this, \"sourceSweepAngle\", Math.PI * 2);\n    l(this, \"targetNode\");\n    l(this, \"targetDepth\", this.sourceDepth);\n    l(this, \"targetStartAngle\", this.sourceStartAngle);\n    l(this, \"targetSweepAngle\", this.sourceSweepAngle);\n    l(this, \"animatedNode\");\n    l(this, \"animatedDepth\", this.sourceDepth);\n    l(this, \"animatedStartAngle\", this.sourceStartAngle);\n    l(this, \"animatedSweepAngle\", this.sourceSweepAngle);\n    l(this, \"previousHoveredNode\");\n    l(this, \"historyStack\", []);\n    this.currentNode = t, this.targetNode = this.currentNode, this.animatedNode = this.currentNode, this.canvas.onmousemove = (i) => {\n      this.handleMouseMove(i);\n    }, this.canvas.onmouseout = (i) => {\n      this.changeHoveredNode(void 0), this.events.emit(\"hover\", null, i);\n    }, this.canvas.onclick = (i) => {\n      let s = this.hitTestNode(i);\n      if (!s)\n        return;\n      this.events.emit(\"click\", s, i);\n      let h = [];\n      s !== this.animatedNode.parent ? h = this.historyStack.concat(this.currentNode) : this.historyStack.length > 0 && (s = this.historyStack.pop(), h = this.historyStack.slice()), this.events.emit(\"click\", s, i), s.children.length > 0 ? (this.select(s), this.historyStack = h) : i.preventDefault();\n    }, this.el.append(this.canvas), this.resize(), Promise.resolve().then(() => this.resize()), this.disposables.push(j(() => this.resize())), this.disposables.push(G((i) => this.handleMouseMove(i)));\n  }\n  select(t, e) {\n    (this.currentNode !== t || this.root) && (this.currentNode = t || this.root, this.updateSunburst(e), this.events.emit(\"select\", t));\n  }\n  resize() {\n    this.width = this.el.clientWidth, this.height = this.width, this.centerX = this.width >> 1, this.centerY = this.height >> 1;\n    const t = 2 * Math.ceil(nt(this.maxDepth));\n    this.radiusScale = this.width / t, super.resize();\n  }\n  draw() {\n    this.c.clearRect(0, 0, this.width, this.height), this.drawNode(this.animatedNode, this.animatedDepth, this.computeRadius(this.animatedDepth), this.animatedStartAngle, this.animatedSweepAngle, 3, -1 / 0), this.c.strokeStyle = this.palette.stroke, this.c.beginPath(), this.drawNode(this.animatedNode, this.animatedDepth, this.computeRadius(this.animatedDepth), this.animatedStartAngle, this.animatedSweepAngle, 1, -1 / 0), this.c.stroke(), this.animatedDepth === 0 && (this.c.fillStyle = this.palette.stroke, this.setFont(ct), this.c.textAlign = \"center\", this.c.fillText(St(this.targetNode.size), this.centerX, this.centerY));\n  }\n  // We want to avoid overlapping strokes from lots of really small adjacent\n  // slices all merging together into a solid color. So we enforce a\n  // minimum slice width of 2px and we also skip drawing slices that\n  // have a tail edge less than 1.5px from the previous tail edge.\n  drawNode(t, e, i, s, h, a, r) {\n    const c = this.computeRadius(e + 1);\n    if (c > this.centerY)\n      return r;\n    t === this.hoveredNode && (a |= 8);\n    const d = (i + c) / 2, m = s + h;\n    if (m - r < 1.5 / d)\n      return r;\n    let u = 2 / d;\n    if (h > u && (u = h), a & 2)\n      this.c.fillStyle = $(this.getColor(t) || this.palette.fallback, this.c, this.centerX, this.centerY, 1), this.c.beginPath(), this.c.arc(this.centerX, this.centerY, i, s, s + u, !1), this.c.arc(this.centerX, this.centerY, c, s + u, s, !0), this.c.fill(), this.hoveredNode && (a & 8 || t.parent === this.hoveredNode) && (this.c.fillStyle = this.palette.hover, this.c.fill());\n    else {\n      const f = u === Math.PI * 2, N = a & 4 || f ? c : i;\n      a & 1 && i > 0 && this.c.arc(this.centerX, this.centerY, i, s + u, s, !0), this.c.moveTo(this.centerX + N * Math.cos(s), this.centerY + N * Math.sin(s)), this.c.arc(this.centerX, this.centerY, c, s, s + u, !1), f || this.c.lineTo(this.centerX + i * Math.cos(s + u), this.centerY + i * Math.sin(s + u));\n    }\n    const p = t.size;\n    let v = a & 10, g = 0, w = -1 / 0;\n    for (const f of t.children)\n      w = this.drawNode(f, e + 1, c, s + h * g / p, f.size / p * h, v, w), g += f.size, v |= 4;\n    return m;\n  }\n  changeHoveredNode(t, e) {\n    this.hoveredNode !== t && (this.hoveredNode = t, this.updateSunburst(e));\n  }\n  hitTestNode(t) {\n    const e = this.canvas.getBoundingClientRect(), i = t.clientX - e.left - this.centerX, s = t.clientY - e.top - this.centerY, h = Math.sqrt(i * i + s * s), a = Math.atan2(s, i), r = (c, d, m, u, p) => {\n      const v = this.computeRadius(d + 1);\n      if (v > this.centerY)\n        return;\n      if (h >= m && h < v) {\n        let f = a - u;\n        if (f /= Math.PI * 2, f -= Math.floor(f), f *= Math.PI * 2, f < p)\n          return c === this.animatedNode ? c.parent : c;\n      }\n      const g = c.size;\n      let w = 0;\n      for (const f of c.children) {\n        const N = r(f, d + 1, v, u + p * w / g, f.size / g * p);\n        if (N)\n          return N;\n        w += f.size;\n      }\n    };\n    return r(this.animatedNode, this.animatedDepth, this.computeRadius(this.animatedDepth), this.animatedStartAngle, this.animatedSweepAngle);\n  }\n  tick() {\n    let t = (D() - this.animationStart) / (this.options.animateDuration ?? _.animateDuration);\n    t < 0 || t > 1 ? (t = 1, this.animatedNode = this.targetNode, this.targetDepth = 0, this.targetStartAngle = R, this.targetSweepAngle = Math.PI * 2) : (t < 0.5 ? t *= 4 * t * t : (t = 1 - t, t *= 4 * t * t, t = 1 - t), this.invalidate()), this.animatedDepth = this.sourceDepth + (this.targetDepth - this.sourceDepth) * t, this.animatedStartAngle = this.sourceStartAngle + (this.targetStartAngle - this.sourceStartAngle) * t, this.animatedSweepAngle = this.sourceSweepAngle + (this.targetSweepAngle - this.sourceSweepAngle) * t, this.draw();\n  }\n  handleMouseMove(t) {\n    const e = this.hitTestNode(t);\n    this.changeHoveredNode(e), e && e !== this.animatedNode.parent ? (this.events.emit(\"hover\", e, t), this.canvas.style.cursor = \"pointer\") : this.events.emit(\"hover\", null, t);\n  }\n  computeRadius(t) {\n    return nt(t) * this.radiusScale;\n  }\n  updateSunburst(t = this.options.animate ?? !0) {\n    if (this.previousHoveredNode !== this.hoveredNode && (this.previousHoveredNode = this.hoveredNode, this.hoveredNode || (this.canvas.style.cursor = \"auto\", this.events.emit(\"hover\", null)), this.invalidate()), this.targetNode !== this.currentNode) {\n      if (this.historyStack.length = 0, this.invalidate(), t && (this.animationStart = D()), ht(this.animatedNode, this.currentNode)) {\n        const e = {\n          depth_: this.animatedDepth,\n          startAngle_: this.animatedStartAngle,\n          sweepAngle_: this.animatedSweepAngle\n        };\n        I(this.animatedNode, this.currentNode, e), this.animatedDepth = e.depth_, this.animatedStartAngle = e.startAngle_, this.animatedSweepAngle = e.sweepAngle_, this.targetDepth = 0, this.targetStartAngle = R, this.targetSweepAngle = Math.PI * 2, this.animatedNode = this.currentNode;\n      } else if (ht(this.currentNode, this.animatedNode)) {\n        const e = {\n          depth_: 0,\n          startAngle_: R,\n          sweepAngle_: Math.PI * 2\n        };\n        I(this.currentNode, this.animatedNode, e), this.targetDepth = e.depth_, this.targetStartAngle = e.startAngle_, this.targetSweepAngle = e.sweepAngle_;\n      } else\n        this.animationStart = -1 / 0, this.animatedNode = this.currentNode;\n      this.sourceDepth = this.animatedDepth, this.sourceStartAngle = this.animatedStartAngle, this.sourceSweepAngle = this.animatedSweepAngle, this.targetNode = this.currentNode, this.events.emit(\"select\", this.currentNode);\n    }\n  }\n}\nconst A = 4, z = 20, P = 2 * A, C = z + A;\nfunction Y(n, o, t, e, i) {\n  const s = [], h = (r, c, d, m, u) => {\n    const p = n[r].size * u, v = n[c].size * u;\n    return Math.max(\n      d * d * p / (m * m),\n      m * m / (d * d * v)\n    );\n  };\n  return ((r, c, d, m, u) => {\n    for (; r < n.length; ) {\n      let p = 0;\n      for (let x = r; x < n.length; x++)\n        p += n[x].size;\n      const v = Math.min(m, u), g = m * u / p;\n      let w = r, f = 0, N = 0;\n      for (; w < n.length; ) {\n        const x = n[w].size * g, O = h(r, w, v, f + x, g);\n        if (w > r && N < O)\n          break;\n        f += x, N = O, w++;\n      }\n      const M = Math.round(f / v);\n      let T = 0;\n      for (let x = r; x < w; x++) {\n        const O = n[x], U = O.size * g, k = Math.round(v * T / f), Z = Math.round(v * (T + U) / f), [K, Q, B, F] = m >= u ? [c, d + k, M, Z - k] : [c + k, d, Z - k, M];\n        s.push({\n          node: O,\n          box: [K, Q, B, F],\n          children: B > P && F > C ? Y(\n            O.children,\n            K + A,\n            Q + z,\n            B - P,\n            F - C\n          ) : []\n        }), T += U;\n      }\n      r = w, m >= u ? (c += M, m -= M) : (d += M, u -= M);\n    }\n  })(0, o, t, e, i), s;\n}\nclass zt extends q {\n  constructor(t, e = {}) {\n    super(t, e);\n    l(this, \"hoveredNode\", null);\n    l(this, \"currentNode\", null);\n    l(this, \"bgOriginX\", 0);\n    l(this, \"bgOriginY\", 0);\n    l(this, \"layers\", {\n      base: null\n    });\n    l(this, \"baseLayoutCache\");\n    l(this, \"currentOriginX\", 0);\n    l(this, \"currentOriginY\", 0);\n    l(this, \"animationStart\", 0);\n    l(this, \"animationBlend\", 1);\n    l(this, \"animationSource\", null);\n    l(this, \"animationTarget\", null);\n    this.canvas.addEventListener(\"mousemove\", (i) => {\n      this.updateHover(i);\n    }), this.canvas.addEventListener(\"mouseout\", (i) => {\n      this.changeHoveredNode(null), this.events.emit(\"hover\", null, i);\n    }), this.el.addEventListener(\"click\", (i) => {\n      const s = this.hitTestNode(i);\n      if (s) {\n        const h = s.node;\n        this.events.emit(\"click\", h, i), h.children.length ? s !== this.layers.current ? (this.changeCurrentLayout(s), this.changeHoveredNode(null)) : this.updateHover(i) : this.updateHover(i);\n      } else this.currentNode && (this.changeCurrentLayout(null), this.updateHover(i));\n    }), this.el.append(this.canvas), this.resize(), Promise.resolve().then(() => this.resize()), this.disposables.push(G((i) => this.updateHover(i))), this.disposables.push(j(() => this.resize()));\n  }\n  select(t, e) {\n    let i = null;\n    t === this.root && (t = null), t ? i = this.searchFor([this.layers.current, this.layers.base], t) : i = null, this.changeCurrentLayout(i, e);\n  }\n  drawBaseLayout() {\n    !this.width || !this.height || (this.c.clearRect(0, 0, this.width, this.height), this.bgOriginX = this.bgOriginY = 0, this.baseLayoutCache ? this.c.putImageData(this.baseLayoutCache, 0, 0) : (this.drawLayout(this.layers.base, 0, []), this.baseLayoutCache = this.c.getImageData(0, 0, this.width * this.ratio, this.height * this.ratio)));\n  }\n  draw() {\n    this.drawBaseLayout(), this.layers.current || this.drawHoverHighlight(this.layers.base);\n    const t = this.layers.current ? this.animationSource ? this.animationTarget ? 1 : 1 - this.animationBlend : this.animationBlend : 0;\n    if (this.layers.current) {\n      const [e, i, s, h] = this.layers.base.box;\n      this.c.globalAlpha = 0.6 * (!this.layers.current || !this.animationSource ? 1 : t), this.c.fillStyle = this.palette.bg, this.c.fillRect(e, i, s, h), this.c.globalAlpha = 1;\n    }\n    if (this.layers.previous && this.drawLayout(this.layers.previous, 1, [this.layers.current]), this.layers.current) {\n      const [e, i, s, h] = this.layers.current.box, a = this.c.getTransform(), r = Math.sqrt(a.a * a.d);\n      this.c.save(), this.c.shadowColor = this.palette.shadow, this.c.shadowBlur = r * (30 * t), this.c.shadowOffsetX = r * (2 * this.width), this.c.shadowOffsetY = r * (2 * this.height + 15 * t), this.c.fillRect(e - 2 * this.width, i - 2 * this.height, s, h), this.c.restore(), this.bgOriginX = this.currentOriginX, this.bgOriginY = this.currentOriginY, this.drawLayout(this.layers.current, 0, []), this.drawHoverHighlight(this.layers.current);\n    }\n  }\n  tick() {\n    const t = this.animationBlend, e = this.currentNode;\n    this.animationBlend = (D() - this.animationStart) / (this.options.animateDuration ?? _.animateDuration), this.animationBlend < 0 || this.animationBlend > 1 ? (this.currentNode = this.animationTarget, this.layers.previous = void 0, this.animationBlend = 1) : (this.animationBlend = 1 - this.animationBlend, this.animationBlend *= this.animationBlend * this.animationBlend, this.animationBlend = 1 - this.animationBlend, this.invalidate()), (this.animationBlend !== t || this.currentNode !== e) && this.updateCurrentLayout(), this.draw();\n  }\n  resize() {\n    this.baseLayoutCache = void 0;\n    const t = this.width, e = this.height;\n    this.width = Math.min(this.el.clientWidth, 1600), this.height = Math.max(Math.round(this.width / 2), innerHeight - 200), (this.width !== t || this.height !== e || !this.layers.base) && (this.layers.base = Y([this.root], 0, 0, this.width - 1, this.height - 1)[0], this.updateCurrentLayout()), super.resize();\n  }\n  *iterateNodeToDraw(t, e, i) {\n    const s = t.node, [h, a, r, c] = t.box;\n    let d = (s === this.hoveredNode ? 1 : 0) | (t === this.animationTarget ? 2 : 0);\n    if (e === 1)\n      for (const m of i) {\n        if (!m)\n          continue;\n        const [u, p, v, g] = m.box;\n        if (h >= u && a >= p && h + r <= u + v && a + c <= p + g) {\n          e = 2;\n          break;\n        }\n      }\n    for (const m of t.children)\n      d |= yield* this.iterateNodeToDraw(m, e, i);\n    return e !== 2 && (yield t), d;\n  }\n  drawHoverHighlight(t) {\n    const e = this.iterateNodeToDraw(t, 0, []), i = this.c.globalCompositeOperation;\n    for (; ; ) {\n      const s = e.next();\n      if (s.done) {\n        this.c.globalCompositeOperation = i;\n        return;\n      }\n      const h = s.value.node;\n      if (this.hoveredNode === h) {\n        this.c.globalCompositeOperation = \"overlay\";\n        const [a, r, c, d] = s.value.box;\n        this.c.fillStyle = this.palette.hover, this.c.fillRect(a, r, c, d);\n      }\n    }\n  }\n  drawNodeBackground(t, e, i) {\n    const s = this.iterateNodeToDraw(t, e, i);\n    for (; ; ) {\n      const h = s.next();\n      if (h.done)\n        return h.value;\n      const [a, r, c, d] = h.value.box;\n      this.c.fillStyle = $(this.getColor(h.value.node) || this.palette.fallback, this.c, this.bgOriginX, this.bgOriginY, 1), h.value.children.length ? (this.c.fillRect(a, r, c, z), this.c.fillRect(a, r + d - A, c, A), this.c.fillRect(a, r + z, A, d - C), this.c.fillRect(a + c - A, r + z, A, d - C)) : this.c.fillRect(a, r, c, d);\n    }\n  }\n  drawLayout(t, e, i) {\n    this.drawNodeBackground(t, e, i), this.drawNodeForeground(t, e, i);\n  }\n  drawNodeForeground(t, e, i) {\n    const s = this.iterateNodeToDraw(t, e, i);\n    for (; ; ) {\n      const h = s.next();\n      if (h.done)\n        return;\n      const a = h.value.node, [r, c, d, m] = h.value.box;\n      if (lt(this.c, this.palette.stroke, r + 0.5, c + 0.5, d, m), m >= z) {\n        this.c.fillStyle = this.palette.text;\n        const u = d - P, p = c + Math.round(C / 2), [v, g] = this.textOverflowEllipsis(this.getText(a) || \"\", u);\n        let w = r + Math.round((d - g) / 2);\n        const f = this.getText(a), N = this.getSubtext(a);\n        if (v === f && a.children.length) {\n          let M = N || \"\";\n          M && f && (M = ` - ${M}`);\n          const [T, x] = this.textOverflowEllipsis(M, u - g);\n          w = r + Math.round((d - g - x) / 2), this.c.globalAlpha = 0.5, this.c.fillText(T, w + g, p), this.c.globalAlpha = 1;\n        }\n        if (this.c.fillText(v, w, p), m > C + 16 && !a.children.length) {\n          const [M, T] = this.textOverflowEllipsis(N || \"\", u);\n          this.c.globalAlpha = 0.5;\n          const x = f ? z : z / 2 + A;\n          this.c.fillText(M, r + Math.round((d - T) / 2), c + x + Math.round(m - C) / 2), this.c.globalAlpha = 1;\n        }\n      }\n    }\n  }\n  updateCurrentLayout() {\n    const t = this.options.selectedPaddingRatio ?? 0.2;\n    if (this.currentNode) {\n      const [e, i, s, h] = this.currentNode.box, a = e + s, r = i + h, c = Math.round(this.width * t / 2), d = Math.round(this.height * t / 2), m = this.width - c - 1, u = this.height - d - 1, p = this.animationTarget ? this.animationBlend : 1 - this.animationBlend, v = Math.round(e + (c - e) * p), g = Math.round(i + (d - i) * p), w = Math.round(a + (m - a) * p), f = Math.round(r + (u - r) * p), N = (M) => M - Math.floor(M / 64 - 0.5) * 64;\n      this.layers.current = Y([this.currentNode.node], v, g, w - v, f - g)[0], this.currentOriginX = N(-(e + a) / 2) * (1 - p) + (v + w) / 2, this.currentOriginY = N(-(i + r) / 2) * (1 - p) + (g + f) / 2;\n    } else\n      this.layers.current = void 0, this.currentOriginX = 0, this.currentOriginY = 0;\n  }\n  hitTestNode(t) {\n    const e = this.canvas.getBoundingClientRect(), i = t.clientX - e.left, s = t.clientY - e.top, h = (a, r) => {\n      for (const c of a) {\n        const [d, m, u, p] = c.box;\n        if (i >= d && s >= m && i < d + u && s < m + p)\n          return h(c.children, !1) || (r ? null : c);\n      }\n      return null;\n    };\n    return this.layers.current ? h([this.layers.current], !1) : h([this.layers.base], !0);\n  }\n  updateHover(t) {\n    const e = this.hitTestNode(t);\n    this.changeHoveredNode(e && e.node), this.events.emit(\"hover\", (e == null ? void 0 : e.node) || null, t);\n  }\n  changeHoveredNode(t) {\n    this.hoveredNode !== t && (this.hoveredNode = t, this.canvas.style.cursor = t && !t.children.length ? \"pointer\" : \"auto\", this.invalidate());\n  }\n  searchFor(t, e) {\n    for (const i of t) {\n      if (!i)\n        continue;\n      const s = i.node === e ? i : this.searchFor(i.children, e);\n      if (s)\n        return s;\n    }\n    return null;\n  }\n  changeCurrentLayout(t, e = this.options.animate) {\n    this.animationTarget !== t && (this.events.emit(\"select\", (t == null ? void 0 : t.node) || null), this.layers.previous = t ? this.layers.current : void 0, e && (this.animationBlend = 0, this.animationStart = D(), this.animationSource = this.currentNode), this.animationTarget = t, this.currentNode = t || this.searchFor([this.layers.base], this.currentNode.node), this.updateCurrentLayout(), this.invalidate());\n  }\n}\n\n//# sourceMappingURL=index-BfFEknL3.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@spotlightjs/overlay/dist/index-BfFEknL3.js\n"));

/***/ })

}]);